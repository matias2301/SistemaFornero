{"ast":null,"code":"import { HttpHeaders } from '@angular/common/http';\nimport { map } from 'rxjs/operators';\nimport { BehaviorSubject } from 'rxjs';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"@angular/common/http\";\nexport let ManageDataService = /*#__PURE__*/(() => {\n  class ManageDataService {\n    constructor(httpClient) {\n      this.httpClient = httpClient;\n      this.AUTH_SERVER_ADDRESS = 'http://localhost:8000';\n      this.stockWatcher = new BehaviorSubject(null);\n      this.getData('articles');\n    }\n\n    getData(route) {\n      return this.httpClient.get(`${this.AUTH_SERVER_ADDRESS}/api/${route}`).pipe(map(res => {\n        if (route === 'articles') this.stockWatcher.next(res.articles);\n        return res;\n      }));\n    }\n\n    getDataById(route, id) {\n      return this.httpClient.get(`${this.AUTH_SERVER_ADDRESS}/api/${route}/${id}`).pipe(map(res => res));\n    }\n\n    createRecord(route, values) {\n      return this.httpClient.post(`${this.AUTH_SERVER_ADDRESS}/api/${route}`, values).pipe(map(res => {\n        if (route === 'articles' || route === 'repairs') {\n          this.getData('articles').subscribe(res => console.log(res));\n        }\n\n        return res;\n      }));\n    }\n\n    deleteRecord(route, id) {\n      let token = localStorage.getItem('auth-token');\n      let httpOptions = {\n        headers: new HttpHeaders({\n          'x-token': token\n        })\n      };\n      return this.httpClient.delete(`${this.AUTH_SERVER_ADDRESS}/api/${route}/${id}`, httpOptions).pipe(map(res => {\n        if (route === 'articles' || route === 'repairs') {\n          this.getData('articles').subscribe(res => console.log(res));\n        }\n\n        return res;\n      }));\n    }\n\n    updateRecord(route, id, values) {\n      let token = localStorage.getItem('auth-token');\n      let httpOptions = {\n        headers: new HttpHeaders({\n          'x-token': token\n        })\n      };\n      return this.httpClient.put(`${this.AUTH_SERVER_ADDRESS}/api/${route}/${id}`, values, httpOptions).pipe(map(res => {\n        if (route === 'articles' || route === 'repairs') {\n          this.getData('articles').subscribe(res => console.log(res));\n        }\n\n        return res;\n      }));\n    }\n\n  }\n\n  ManageDataService.ɵfac = function ManageDataService_Factory(t) {\n    return new (t || ManageDataService)(i0.ɵɵinject(i1.HttpClient));\n  };\n\n  ManageDataService.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n    token: ManageDataService,\n    factory: ManageDataService.ɵfac,\n    providedIn: 'root'\n  });\n  return ManageDataService;\n})();","map":null,"metadata":{},"sourceType":"module"}
{"ast":null,"code":"import { map } from 'rxjs/operators';\nimport { BehaviorSubject } from 'rxjs';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"@angular/common/http\";\nimport * as i2 from \"@angular/router\";\nexport let AuthService = /*#__PURE__*/(() => {\n  class AuthService {\n    constructor(httpClient, router) {\n      this.httpClient = httpClient;\n      this.router = router;\n      this.AUTH_SERVER_ADDRESS = 'http://localhost:8000';\n      this.ACCESS_TOKEN = 'auth-token';\n      this.authSubject = new BehaviorSubject({\n        id: '',\n        name: '',\n        logged: false\n      });\n      this.checkToken();\n    }\n\n    checkToken() {\n      if (localStorage.getItem(this.ACCESS_TOKEN)) {\n        this.authSubject.next({\n          id: localStorage.getItem('ID'),\n          name: localStorage.getItem('NAME'),\n          logged: true\n        });\n      }\n    }\n\n    register(user) {\n      return this.httpClient.post(`${this.AUTH_SERVER_ADDRESS}/api/users`, user).pipe(map(res => res));\n    }\n\n    login(user) {\n      return this.httpClient.post(`${this.AUTH_SERVER_ADDRESS}/api/auth`, user).pipe(map(res => {\n        if (res.success) {\n          localStorage.setItem(this.ACCESS_TOKEN, res.token);\n          localStorage.setItem('ID', `${res.user.id}`);\n          localStorage.setItem('NAME', `${res.user.name}`);\n          this.authSubject.next({\n            id: localStorage.getItem('ID'),\n            name: localStorage.getItem('NAME'),\n            logged: true\n          });\n        }\n\n        return res;\n      }));\n    }\n\n    logout() {\n      localStorage.removeItem(this.ACCESS_TOKEN);\n      this.authSubject.next({\n        id: '',\n        name: \"\",\n        logged: false\n      });\n      this.router.navigateByUrl('login');\n    }\n\n    isAuthenticated() {\n      if (!this.authSubject.value.logged) {\n        this.router.navigateByUrl('login');\n      }\n\n      return this.authSubject.value.logged;\n    }\n\n  }\n\n  AuthService.ɵfac = function AuthService_Factory(t) {\n    return new (t || AuthService)(i0.ɵɵinject(i1.HttpClient), i0.ɵɵinject(i2.Router));\n  };\n\n  AuthService.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n    token: AuthService,\n    factory: AuthService.ɵfac,\n    providedIn: 'root'\n  });\n  return AuthService;\n})();","map":null,"metadata":{},"sourceType":"module"}
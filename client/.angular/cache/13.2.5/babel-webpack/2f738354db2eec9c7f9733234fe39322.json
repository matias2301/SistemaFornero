{"ast":null,"code":"import * as i0 from \"@angular/core\";\nimport * as i1 from \"../../../services/manage-data.service\";\nimport * as i2 from \"../../../services/alerts.service\";\nimport * as i3 from \"@angular/router\";\nimport * as i4 from \"@angular/common\";\nimport * as i5 from \"../../../components/table/table.component\";\n\nconst _c0 = function () {\n  return [2, 4, 6];\n};\n\nfunction ListClientsComponent_div_0_Template(rf, ctx) {\n  if (rf & 1) {\n    const _r2 = i0.ɵɵgetCurrentView();\n\n    i0.ɵɵelementStart(0, \"div\")(1, \"app-table\", 1);\n    i0.ɵɵlistener(\"sort\", function ListClientsComponent_div_0_Template_app_table_sort_1_listener($event) {\n      i0.ɵɵrestoreView(_r2);\n      const ctx_r1 = i0.ɵɵnextContext();\n      return ctx_r1.sortData($event);\n    })(\"rowActionAdd\", function ListClientsComponent_div_0_Template_app_table_rowActionAdd_1_listener($event) {\n      i0.ɵɵrestoreView(_r2);\n      const ctx_r3 = i0.ɵɵnextContext();\n      return ctx_r3.addClient($event);\n    })(\"rowActionEdit\", function ListClientsComponent_div_0_Template_app_table_rowActionEdit_1_listener($event) {\n      i0.ɵɵrestoreView(_r2);\n      const ctx_r4 = i0.ɵɵnextContext();\n      return ctx_r4.editClient($event);\n    })(\"rowActionDelete\", function ListClientsComponent_div_0_Template_app_table_rowActionDelete_1_listener($event) {\n      i0.ɵɵrestoreView(_r2);\n      const ctx_r5 = i0.ɵɵnextContext();\n      return ctx_r5.deleteClient($event);\n    });\n    i0.ɵɵelementEnd()();\n  }\n\n  if (rf & 2) {\n    const ctx_r0 = i0.ɵɵnextContext();\n    i0.ɵɵadvance(1);\n    i0.ɵɵproperty(\"tableData\", ctx_r0.clientsRows)(\"tableColumns\", ctx_r0.clientsColumns)(\"isFilterable\", true)(\"isPageable\", true)(\"paginationSizes\", i0.ɵɵpureFunction0(7, _c0))(\"defaultPageSize\", 4)(\"rowAction\", \"actions\");\n  }\n}\n\nexport let ListClientsComponent = /*#__PURE__*/(() => {\n  class ListClientsComponent {\n    constructor(_manageDataService, _alertsService, router) {\n      this._manageDataService = _manageDataService;\n      this._alertsService = _alertsService;\n      this.router = router;\n      this.loading = true;\n    }\n\n    ngOnInit() {\n      this.initializeColumns();\n      this.getClients();\n    }\n\n    sortData(sortParameters) {\n      const keyName = sortParameters.active;\n\n      if (sortParameters.direction === 'asc') {\n        this.clientsRows = this.clientsRows.sort((a, b) => a[keyName].localeCompare(b[keyName]));\n      } else if (sortParameters.direction === 'desc') {\n        this.clientsRows = this.clientsRows.sort((a, b) => b[keyName].localeCompare(a[keyName]));\n      } else {\n        this.getClients();\n      }\n    }\n\n    addClient() {\n      this.router.navigateByUrl('clients/manage-clients');\n    }\n\n    editClient(client) {\n      this._manageDataService.getDataById('clients', client.id).subscribe(res => {\n        this.router.navigate(['clients/manage-clients', res]);\n      }, err => {\n        console.log(err);\n      });\n    }\n\n    deleteClient(client) {\n      this._manageDataService.deleteRecord('clients', client.id).subscribe(res => {\n        if (res.success) {\n          this._alertsService.alertToast(res.msg, 'success');\n\n          this.clientsRows = this.clientsRows.filter(item => item.id !== client.id);\n        }\n      }, err => {\n        let errorMsg = '';\n\n        if (err.error) {\n          errorMsg = err.error.msg;\n        } else {\n          errorMsg = 'Something went wrong';\n        }\n\n        this._alertsService.alertToast(errorMsg, 'error');\n      });\n    }\n\n    initializeColumns() {\n      this.clientsColumns = [{\n        name: 'FirstName',\n        dataKey: 'firstName',\n        position: 'left',\n        isSortable: true\n      }, {\n        name: 'LastName',\n        dataKey: 'lastName',\n        position: 'left',\n        isSortable: true\n      }, {\n        name: 'Email',\n        dataKey: 'email',\n        position: 'left',\n        isSortable: false\n      }, {\n        name: 'Phone',\n        dataKey: 'phone',\n        position: 'left',\n        isSortable: false\n      }, {\n        name: 'St.Name',\n        dataKey: 'streetName',\n        position: 'left',\n        isSortable: false\n      }, {\n        name: 'St.Number',\n        dataKey: 'streetNumber',\n        position: 'left',\n        isSortable: false\n      }, {\n        name: 'City',\n        dataKey: 'city',\n        position: 'left',\n        isSortable: false\n      }];\n    }\n\n    getClients() {\n      this._manageDataService.getData('clients').subscribe(res => {\n        this.clientsRows = res.clients;\n        this.loading = false;\n      });\n    }\n\n  }\n\n  ListClientsComponent.ɵfac = function ListClientsComponent_Factory(t) {\n    return new (t || ListClientsComponent)(i0.ɵɵdirectiveInject(i1.ManageDataService), i0.ɵɵdirectiveInject(i2.AlertsService), i0.ɵɵdirectiveInject(i3.Router));\n  };\n\n  ListClientsComponent.ɵcmp = /*@__PURE__*/i0.ɵɵdefineComponent({\n    type: ListClientsComponent,\n    selectors: [[\"app-list-clients\"]],\n    decls: 1,\n    vars: 1,\n    consts: [[4, \"ngIf\"], [3, \"tableData\", \"tableColumns\", \"isFilterable\", \"isPageable\", \"paginationSizes\", \"defaultPageSize\", \"rowAction\", \"sort\", \"rowActionAdd\", \"rowActionEdit\", \"rowActionDelete\"]],\n    template: function ListClientsComponent_Template(rf, ctx) {\n      if (rf & 1) {\n        i0.ɵɵtemplate(0, ListClientsComponent_div_0_Template, 2, 8, \"div\", 0);\n      }\n\n      if (rf & 2) {\n        i0.ɵɵproperty(\"ngIf\", !ctx.loading);\n      }\n    },\n    directives: [i4.NgIf, i5.TableComponent],\n    styles: [\"\"]\n  });\n  return ListClientsComponent;\n})();","map":null,"metadata":{},"sourceType":"module"}
{"ast":null,"code":"import { NavigationEnd } from \"@angular/router\";\nimport { menu } from '../../interfaces/menu';\nimport { filter, map, distinctUntilChanged } from 'rxjs/operators';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"@angular/router\";\nimport * as i2 from \"../../services/url.service\";\nimport * as i3 from \"./breadcrumb.service\";\nimport * as i4 from \"@angular/common\";\n\nfunction BreadcrumbComponent_li_2_ng_container_1_span_3_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"span\");\n    i0.ɵɵtext(1, \" \\u00BB \");\n    i0.ɵɵelementEnd();\n  }\n}\n\nfunction BreadcrumbComponent_li_2_ng_container_1_Template(rf, ctx) {\n  if (rf & 1) {\n    const _r8 = i0.ɵɵgetCurrentView();\n\n    i0.ɵɵelementContainerStart(0);\n    i0.ɵɵelementStart(1, \"span\", 4);\n    i0.ɵɵlistener(\"click\", function BreadcrumbComponent_li_2_ng_container_1_Template_span_click_1_listener() {\n      i0.ɵɵrestoreView(_r8);\n      const i_r2 = i0.ɵɵnextContext().index;\n      const ctx_r6 = i0.ɵɵnextContext();\n      return ctx_r6.routeTo(i_r2);\n    });\n    i0.ɵɵtext(2);\n    i0.ɵɵelementEnd();\n    i0.ɵɵtemplate(3, BreadcrumbComponent_li_2_ng_container_1_span_3_Template, 2, 0, \"span\", 3);\n    i0.ɵɵelementContainerEnd();\n  }\n\n  if (rf & 2) {\n    const ctx_r9 = i0.ɵɵnextContext();\n    const isLast_r3 = ctx_r9.last;\n    const breadcrumb_r1 = ctx_r9.$implicit;\n    i0.ɵɵadvance(1);\n    i0.ɵɵclassProp(\"breadcrumb-history-link\", !isLast_r3);\n    i0.ɵɵadvance(1);\n    i0.ɵɵtextInterpolate(breadcrumb_r1.name);\n    i0.ɵɵadvance(1);\n    i0.ɵɵproperty(\"ngIf\", !isLast_r3);\n  }\n}\n\nfunction BreadcrumbComponent_li_2_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"li\");\n    i0.ɵɵtemplate(1, BreadcrumbComponent_li_2_ng_container_1_Template, 4, 4, \"ng-container\", 3);\n    i0.ɵɵelementEnd();\n  }\n\n  if (rf & 2) {\n    const breadcrumb_r1 = ctx.$implicit;\n    i0.ɵɵadvance(1);\n    i0.ɵɵproperty(\"ngIf\", !breadcrumb_r1.pauseDisplay);\n  }\n}\n\nexport let BreadcrumbComponent = /*#__PURE__*/(() => {\n  class BreadcrumbComponent {\n    constructor(router, activatedRoute, urlService, breadcrumbService) {\n      this.router = router;\n      this.activatedRoute = activatedRoute;\n      this.urlService = urlService;\n      this.breadcrumbService = breadcrumbService;\n      this.breadcrumbs = [];\n      this.currentUrl = '';\n    }\n\n    ngOnInit() {\n      this.setDefaultBreadcrumb();\n      this.listenForRouteChange();\n      this.listenForBreadcrumbUpdate();\n    }\n\n    setDefaultBreadcrumb() {\n      this.setCurrentUrl();\n\n      if (this.currentUrl) {\n        let navItem = this.findRoute();\n\n        if (navItem) {\n          let breadcrumb = {\n            name: navItem.displayName,\n            url: this.currentUrl\n          };\n          this.breadcrumbs.push(breadcrumb);\n        }\n      }\n    }\n\n    listenForBreadcrumbUpdate() {\n      this.breadcrumbService.onUpdate().subscribe(str => {\n        this.handleBreadcrumbUpdate(str);\n      });\n    }\n\n    handleBreadcrumbUpdate(str) {\n      //breadcrumb updates only happen on current route\n      //so the breadcrumb we need to update is the latest one\n      let lastBreadcrumb = this.breadcrumbs[this.breadcrumbs.length - 1];\n\n      if (lastBreadcrumb.pauseDisplay) {\n        lastBreadcrumb.pauseDisplay = false;\n        lastBreadcrumb.name = str;\n      }\n    }\n\n    listenForRouteChange() {\n      this.router.events.pipe(filter(event => event instanceof NavigationEnd), map(() => this.activatedRoute), map(route => {\n        while (route.firstChild) {\n          route = route.firstChild;\n        }\n\n        return route;\n      }), distinctUntilChanged()).subscribe(route => this.handleCurrentRoute(route));\n    }\n\n    setCurrentUrl() {\n      let url = this.router.url;\n\n      if (url) {\n        //don't need the query parameter list here\n        //nor do we need the initial /\n        this.currentUrl = this.urlService.shortenUrlIfNecessary(url.substring(1));\n      }\n    }\n\n    handleCurrentRoute(route) {\n      this.setCurrentUrl();\n      let navItem = this.findRoute(menu);\n\n      if (navItem) {\n        //if we get here, the user clicked on item on the sidebar\n        //we'll reset the breadcrumbs to start over\n        this.handleTopLevelBreadcrumb(navItem);\n      } else {\n        //if we get here, the user clicked a link in the main content section\n        //we'll add to the breadcrumbs\n        this.addBreadcrumb(route);\n      }\n    }\n\n    addBreadcrumb(route) {\n      if (this.breadcrumbs.length < 6) {\n        let breadcrumb = null;\n        route.data.subscribe(data => {\n          breadcrumb = {\n            name: data.breadcrumb,\n            url: this.currentUrl,\n            pauseDisplay: data.pauseDisplay\n          };\n        });\n\n        if (breadcrumb) {\n          //we only add a new breadcrumb if the person isn't visiting a page that's\n          //already in the breadcrumbs array\n          if (breadcrumb.url != this.breadcrumbs[this.breadcrumbs.length - 1].url) {\n            route.queryParams.subscribe(queryParams => {\n              if (queryParams) {\n                breadcrumb.queryParams = queryParams;\n              }\n            });\n            this.breadcrumbs.push(breadcrumb);\n          }\n        }\n      }\n    }\n\n    handleTopLevelBreadcrumb(navItem) {\n      this.breadcrumbs = [];\n      let breadcrumb = {\n        name: navItem.displayName,\n        url: navItem.route\n      };\n      this.breadcrumbs.push(breadcrumb);\n    }\n\n    findRoute(navItems) {\n      if (!navItems) navItems = menu;\n      let returnedItem = null;\n\n      if (this.currentUrl) {\n        for (let item of navItems) {\n          if (this.currentUrl == item.route) {\n            returnedItem = item;\n            break;\n          } else if (item.children) {\n            returnedItem = this.findRoute(item.children);\n            if (returnedItem != null) break;\n          }\n        }\n      }\n\n      return returnedItem;\n    }\n\n    routeTo(index) {\n      if (index < this.breadcrumbs.length - 1) {\n        //if the person clicked on a link in the breadcrumbs list,\n        //get rid of every breadcrumb after that point\n        this.breadcrumbs.splice(index + 1);\n      }\n\n      let breadcrumb = this.breadcrumbs[index];\n      let route = breadcrumb.url;\n      this.router.navigate([route], {\n        queryParams: breadcrumb.queryParams\n      });\n    }\n\n  }\n\n  BreadcrumbComponent.ɵfac = function BreadcrumbComponent_Factory(t) {\n    return new (t || BreadcrumbComponent)(i0.ɵɵdirectiveInject(i1.Router), i0.ɵɵdirectiveInject(i1.ActivatedRoute), i0.ɵɵdirectiveInject(i2.UrlService), i0.ɵɵdirectiveInject(i3.BreadcrumbService));\n  };\n\n  BreadcrumbComponent.ɵcmp = /*@__PURE__*/i0.ɵɵdefineComponent({\n    type: BreadcrumbComponent,\n    selectors: [[\"app-breadcrumb\"]],\n    decls: 4,\n    vars: 1,\n    consts: [[1, \"route-content-top\"], [1, \"breadcrumbs\"], [4, \"ngFor\", \"ngForOf\"], [4, \"ngIf\"], [1, \"breadcrumb-current-route\", 3, \"click\"]],\n    template: function BreadcrumbComponent_Template(rf, ctx) {\n      if (rf & 1) {\n        i0.ɵɵelementStart(0, \"div\", 0)(1, \"ol\", 1);\n        i0.ɵɵtemplate(2, BreadcrumbComponent_li_2_Template, 2, 1, \"li\", 2);\n        i0.ɵɵelementEnd();\n        i0.ɵɵelement(3, \"hr\");\n        i0.ɵɵelementEnd();\n      }\n\n      if (rf & 2) {\n        i0.ɵɵadvance(2);\n        i0.ɵɵproperty(\"ngForOf\", ctx.breadcrumbs);\n      }\n    },\n    directives: [i4.NgForOf, i4.NgIf],\n    styles: [\"ol.breadcrumbs[_ngcontent-%COMP%]{padding:0;list-style-type:none;font-weight:500}\"]\n  });\n  return BreadcrumbComponent;\n})();","map":null,"metadata":{},"sourceType":"module"}